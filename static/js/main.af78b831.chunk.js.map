{"version":3,"sources":["ContactForm/ContactForm.js","Filter/Filter.js","ContactList/ContactList.js","ContactItem/ContactItem.js","App.js","index.js"],"names":["ContactForm","banOnAddingDuplicateContact","useState","name","setName","number","setNumber","nameId","shortid","numberId","resetForm","className","onSubmit","e","preventDefault","contact","id","htmlFor","type","value","onChange","target","pattern","title","required","Filter","handleChangeFilter","ContactList","children","ContactItem","filter","contacts","deleteContact","map","onClick","toLowerCase","includes","App","JSON","parse","localStorage","getItem","setContacts","setFilter","useEffect","setItem","stringify","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af78b831.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport shortid from 'shortid'\r\nimport './ContactForm.css'\r\n\r\nfunction ContactForm({ banOnAddingDuplicateContact }) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n  let nameId = shortid()\r\n  let numberId = shortid()\r\n\r\n  const handleChangeName = (e) => {\r\n    setName(e.target.value)\r\n  }\r\n\r\n  const handleChangeNumber = (e) => {\r\n    setNumber(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    const contact = {\r\n      id: shortid(),\r\n      name,\r\n      number,\r\n    }\r\n\r\n    banOnAddingDuplicateContact(contact)\r\n    resetForm()\r\n  }\r\n\r\n  const resetForm = () => {\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n\r\n  return (\r\n    <form className='contact-form' onSubmit={handleSubmit}>\r\n      <label className='label' htmlFor={nameId}>\r\n        Enter name\r\n      </label>\r\n      <input\r\n        id={nameId}\r\n        type='text'\r\n        className='input'\r\n        name='name'\r\n        value={name}\r\n        onChange={handleChangeName}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n      <label className='label' htmlFor={numberId}>\r\n        Enter number\r\n      </label>\r\n      <input\r\n        id={numberId}\r\n        type='tel'\r\n        className='input'\r\n        name='number'\r\n        value={number}\r\n        onChange={handleChangeNumber}\r\n        pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\r\n        title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\r\n        required\r\n      />\r\n      <button type='submit' className='contact-button'>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nContactForm.propTypes = {\r\n  banOnAddingDuplicateContact: PropTypes.func,\r\n}\r\n\r\nexport default ContactForm\r\n","import PropTypes from 'prop-types'\nimport './Filter.css'\n\nconst Filter = ({ handleChangeFilter }) => {\n  return (\n    <div className='filter-container'>\n      <label className='label' htmlFor='filter'>\n        Find contacts by name\n      </label>\n      <input\n        className='input'\n        id='filter'\n        type='text'\n        name='filter'\n        onChange={handleChangeFilter}\n      />\n    </div>\n  )\n}\n\nFilter.propTypes = {\n  filterId: PropTypes.string,\n  handleChangeFilter: PropTypes.func,\n}\n\nexport default Filter\n","import './ContactList.css'\n\nconst ContactList = ({ children }) => {\n  return <ul className='contact-list'>{children}</ul>\n}\n\nexport default ContactList\n","import PropTypes from 'prop-types'\nimport './ContactItem.css'\n\nconst ContactItem = ({ filter, contacts, deleteContact }) => {\n  return (\n    <>\n      {filter === ''\n        ? contacts.map(({ id, name, number }) => (\n            <li key={id}>\n              {name}: {number}\n              <button\n                type='button'\n                className='delete-button'\n                onClick={() => deleteContact(id)}\n              >\n                Delete\n              </button>\n            </li>\n          ))\n        : contacts.map(\n            ({ id, name, number }) =>\n              name.toLowerCase().includes(filter.toLowerCase()) && (\n                <li key={id}>\n                  {name}: {number}\n                  <button\n                    type='button'\n                    className='delete-button'\n                    onClick={() => deleteContact(id)}\n                  >\n                    Delete\n                  </button>\n                </li>\n              )\n          )}\n    </>\n  )\n}\n\nContactItem.propTypes = {\n  filter: PropTypes.string,\n  contacts: PropTypes.array,\n  deleteContact: PropTypes.func,\n}\n\nexport default ContactItem\n","import { useState, useEffect } from 'react'\r\nimport ContactForm from './ContactForm/ContactForm'\r\nimport Filter from './Filter/Filter'\r\nimport ContactList from './ContactList/ContactList'\r\nimport ContactItem from './ContactItem/ContactItem'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const [contacts, setContacts] = useState(\r\n    JSON.parse(localStorage.getItem('contacts')) ?? []\r\n  )\r\n\r\n  const [filter, setFilter] = useState('')\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts))\r\n  }, [contacts])\r\n\r\n  const addNewContact = (contact) => {\r\n    setContacts((contacts) => [...contacts, contact])\r\n  }\r\n\r\n  const banOnAddingDuplicateContact = (value) => {\r\n    contacts.map((contact) => contact.name).includes(value.name)\r\n      ? alert(`${value.name} is already in contacts`)\r\n      : addNewContact(value)\r\n  }\r\n\r\n  const handleChangeFilter = (e) => {\r\n    setFilter(e.target.value)\r\n  }\r\n\r\n  const deleteContact = (id) => {\r\n    setContacts(contacts.filter((contact) => contact.id !== id))\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <h1>Phonebook</h1>\r\n\r\n      <ContactForm\r\n        banOnAddingDuplicateContact={banOnAddingDuplicateContact}\r\n      ></ContactForm>\r\n\r\n      <h2>Contacts</h2>\r\n\r\n      <Filter handleChangeFilter={handleChangeFilter}></Filter>\r\n\r\n      <ContactList>\r\n        <ContactItem\r\n          filter={filter}\r\n          contacts={contacts}\r\n          deleteContact={deleteContact}\r\n        ></ContactItem>\r\n      </ContactList>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}